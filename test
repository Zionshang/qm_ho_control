    // 初始化过程噪声协方差矩阵
    Q_init_.setIdentity();
    Q_init_.block<3, 3>(0, 0) = (dt_ / 20.) * I3 * noise_process_imu_position_;
    Q_init_.block<3, 3>(3, 3) = (dt_ * 9.81 / 20.) * I3 * noise_process_imu_velocity_;
    Q_init_.block<kFeetDim, kFeetDim>(6, 6) = dt_ * MatrixXd::Identity(kFeetDim, kFeetDim) * noise_process_foot_position_;
    Q_ = Q_init_;
    Q_(2, 2) = 1000000;

    // 初始化测量噪声协方差矩阵
    R_init_.setIdentity();
    R_init_.block<kFeetDim, kFeetDim>(0, 0) *= noise_meas_joint_position_;
    R_init_.block<kFeetDim, kFeetDim>(kFeetDim, kFeetDim) *= noise_meas_joint_velocity_;
    R_init_.block<kFeetNum, kFeetNum>(2 * kFeetDim, 2 * kFeetDim) *= noise_meas_foot_height_;
    R_ = R_init_;


        double high_suspect_number(1000000);
    bool isContact;
    for (int i = 0; i < kFeetNum; i++)
    {
        if (contact_flag[i] == false)
        {
            Q_.block<3, 3>(6 + 3 * i, 6 + 3 * i) = high_suspect_number * Q_init_.block<3, 3>(6 + 3 * i, 6 + 3 * i);
            R_.block<3, 3>(3 * i, 3 * i) = high_suspect_number * R_init_.block<3, 3>(3 * i, 3 * i);
            R_.block<3, 3>(kFeetDim + 3 * i, kFeetDim + 3 * i) = high_suspect_number * R_init_.block<3, 3>(kFeetDim + 3 * i, kFeetDim + 3 * i);
            R_(2 * kFeetDim + i, 2 * kFeetDim + i) = high_suspect_number * R_init_(2 * kFeetDim + i, 2 * kFeetDim + i);
        }
        else
        {
            Q_.block<3, 3>(6 + 3 * i, 6 + 3 * i) =  Q_init_.block<3, 3>(6 + 3 * i, 6 + 3 * i);
            R_.block<3, 3>(3 * i, 3 * i) =  R_init_.block<3, 3>(3 * i, 3 * i);
            R_.block<3, 3>(kFeetDim + 3 * i, kFeetDim + 3 * i) =  R_init_.block<3, 3>(kFeetDim + 3 * i, kFeetDim + 3 * i);
            R_(2 * kFeetDim + i, 2 * kFeetDim + i) =   R_init_(2 * kFeetDim + i, 2 * kFeetDim + i);
        }
    }